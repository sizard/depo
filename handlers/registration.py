from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters
)
from models import User, UserRole, Railway
from database import session_scope
from .common import show_main_menu, cancel
from .notifications import notify_admins

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
ENTER_FULLNAME, ENTER_POSITION, ENTER_RAILWAY, ENTER_BRANCH, ENTER_PHONE = range(5)

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with session_scope() as session:
        user = session.query(User).filter(User.id == update.effective_user.id).first()
        if user:
            await update.message.reply_text(
                f'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!'
            )
            return await show_main_menu(update, context)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await update.message.reply_text(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ!\n\n'
        'üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
        'üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:'
    )
    return ENTER_FULLNAME

async def process_fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    full_name = update.message.text.strip()
    if len(full_name.split()) < 2:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
        )
        return ENTER_FULLNAME
    
    context.user_data['full_name'] = full_name
    
    await update.message.reply_text(
        '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—à–∏–Ω–∏—Å—Ç, –ü–æ–º–æ—â–Ω–∏–∫ –º–∞—à–∏–Ω–∏—Å—Ç–∞, –î–µ–∂—É—Ä–Ω—ã–π –ø–æ –¥–µ–ø–æ'
    )
    return ENTER_POSITION

async def process_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    position = update.message.text.strip()
    if len(position) < 3:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å'
        )
        return ENTER_POSITION
    
    context.user_data['position'] = position
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Ä–æ–≥–∞–º–∏
    keyboard = [[KeyboardButton(railway.value)] for railway in Railway]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üöÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ—Ä–æ–≥—É:',
        reply_markup=reply_markup
    )
    return ENTER_RAILWAY

async def process_railway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Ä–æ–≥–∏"""
    railway = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–æ—Ä–æ–≥–∞
    try:
        selected_railway = next(r for r in Railway if r.value == railway)
        context.user_data['railway'] = selected_railway
    except StopIteration:
        await update.message.reply_text('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Ä–æ–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞')
        return ENTER_RAILWAY
    
    await update.message.reply_text(
        'üè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:',
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTER_BRANCH

async def process_branch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"""
    branch = update.message.text.strip()
    if len(branch) < 2:
        await update.message.reply_text('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ')
        return ENTER_BRANCH
    
    context.user_data['branch'] = branch
    
    await update.message.reply_text(
        'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: +79001234567'
    )
    return ENTER_PHONE

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone = update.message.text.strip()
    if not phone.startswith('+') or not phone[1:].isdigit() or len(phone) < 10:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: +79001234567'
        )
        return ENTER_PHONE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with session_scope() as session:
            user = User(
                id=update.effective_user.id,
                username=update.effective_user.username,
                full_name=context.user_data['full_name'],
                position=context.user_data['position'],
                railway=context.user_data['railway'],
                branch=context.user_data['branch'],
                phone=phone,
                role=UserRole.USER,
                is_active=True
            )
            session.add(user)
            session.flush()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            user_data = {
                'full_name': user.full_name,
                'position': user.position,
                'railway': user.railway.value,
                'branch': user.branch,
                'phone': user.phone
            }
            
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await notify_admins(
            context,
            f'üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n'
            f'üë§ {user_data["full_name"]}\n'
            f'üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data["position"]}\n'
            f'üöÇ –î–æ—Ä–æ–≥–∞: {user_data["railway"]}\n'
            f'üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user_data["branch"]}\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n'
            f'üë§ {user_data["full_name"]}\n'
            f'üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data["position"]}\n'
            f'üöÇ –î–æ—Ä–æ–≥–∞: {user_data["railway"]}\n'
            f'üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user_data["branch"]}\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}\n\n'
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É! üéâ'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await show_main_menu(update, context)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )
        return ConversationHandler.END

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_handler = ConversationHandler(
    entry_points=[CommandHandler("register", start_registration)],
    states={
        ENTER_FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_fullname)],
        ENTER_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_position)],
        ENTER_RAILWAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_railway)],
        ENTER_BRANCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_branch)],
        ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)
