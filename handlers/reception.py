from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from datetime import datetime

from models import User, TrainReception, TrainType, TrainCategory, BlockInTrain
from database import session_scope
from handlers.common import show_main_menu, cancel
from train_blocks import TRAIN_BLOCKS, BLOCK_DESCRIPTIONS, BLOCK_CHECKLIST
from handlers.reports import show_reception_report, handle_export_pdf

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—ë–º–∫–∏
CHOOSE_ACTION, ENTER_TRAIN_NUMBER, CHOOSE_TRAIN_CATEGORY, CHOOSE_TRAIN_TYPE, CHECK_BLOCKS, ENTER_NOTES, VIEW_HISTORY = range(7)

async def start_reception(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—ë–º–∫–∏"""
    keyboard = [
        [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
        [KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫')],
        [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üöÇ <b>–ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞</b>\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return CHOOSE_ACTION

async def handle_reception_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏—ë–º–∫–æ–π"""
    choice = update.message.text.strip()
    
    if choice == '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await show_main_menu(update, context)
    
    if choice == 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫':
        return await show_reception_history(update, context)
    
    if choice == 'üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞':
        keyboard = [[KeyboardButton('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞')]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            'üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–∞–≤–∞:',
            reply_markup=reply_markup
        )
        return ENTER_TRAIN_NUMBER
    
    keyboard = [
        [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
        [KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫')],
        [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é',
        reply_markup=reply_markup
    )
    return CHOOSE_ACTION

async def handle_train_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞"""
    train_number = update.message.text.strip()
    
    if train_number == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await show_main_menu(update, context)
    
    if len(train_number) < 2:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–∞–≤–∞'
        )
        return ENTER_TRAIN_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['train_number'] = train_number
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–∞–≤–æ–≤
    keyboard = [
        [KeyboardButton(TrainCategory.ELEKTRICHKA.value), 
         KeyboardButton(TrainCategory.RAIL_BUS.value)],
        [KeyboardButton('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Å—Ç–∞–≤–∞:',
        reply_markup=reply_markup
    )
    return CHOOSE_TRAIN_CATEGORY

async def handle_train_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–∞–≤–∞"""
    category = update.message.text.strip()
    
    if category == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await show_main_menu(update, context)
    
    try:
        train_category = TrainCategory(category)
        context.user_data['train_category'] = train_category  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º enum, –∞ –Ω–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        if train_category == TrainCategory.ELEKTRICHKA:
            keyboard = [
                [KeyboardButton(TrainType.EP2D.value), KeyboardButton(TrainType.EP3D.value)],
                [KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
            ]
        else:  # TrainCategory.RAIL_BUS
            keyboard = [
                [KeyboardButton(TrainType.RA1.value), KeyboardButton(TrainType.RA2.value), 
                 KeyboardButton(TrainType.RA3.value)],
                [KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
            ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Å—Ç–∞–≤–∞:',
            reply_markup=reply_markup
        )
        return CHOOSE_TRAIN_TYPE
        
    except ValueError:
        keyboard = [
            [KeyboardButton(TrainCategory.ELEKTRICHKA.value), 
             KeyboardButton(TrainCategory.RAIL_BUS.value)],
            [KeyboardButton('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞')]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Å—Ç–∞–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=reply_markup
        )
        return CHOOSE_TRAIN_CATEGORY

async def handle_train_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ—Å—Ç–∞–≤–∞"""
    type_text = update.message.text.strip()
    
    if type_text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = [
            [KeyboardButton(TrainCategory.ELEKTRICHKA.value), 
             KeyboardButton(TrainCategory.RAIL_BUS.value)],
            [KeyboardButton('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞')]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Å—Ç–∞–≤–∞:',
            reply_markup=reply_markup
        )
        return CHOOSE_TRAIN_CATEGORY
    
    try:
        train_type = TrainType(type_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        train_category = context.user_data.get('train_category')
        if train_category == TrainCategory.ELEKTRICHKA and train_type not in [TrainType.EP2D, TrainType.EP3D]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞")
        elif train_category == TrainCategory.RAIL_BUS and train_type not in [TrainType.RA1, TrainType.RA2, TrainType.RA3]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –†–µ–ª—å—Å–æ–≤—ã–π –∞–≤—Ç–æ–±—É—Å")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏—ë–º–∫—É –≤ –ë–î
        with session_scope() as session:
            reception = TrainReception(
                train_number=context.user_data['train_number'],
                train_type=train_type,
                user_id=update.effective_user.id
            )
            session.add(reception)
            session.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            blocks = TRAIN_BLOCKS.get(train_type, [])
            for block_number in blocks:
                block = BlockInTrain(
                    reception_id=reception.id,
                    block_number=block_number
                )
                session.add(block)
            
            context.user_data['reception_id'] = reception.id
            context.user_data['current_block_index'] = 0
        
        return await show_next_block(update, context)
        
    except ValueError as e:
        keyboard = []
        train_category = context.user_data.get('train_category')
        if train_category == TrainCategory.ELEKTRICHKA:
            keyboard = [
                [KeyboardButton(TrainType.EP2D.value), KeyboardButton(TrainType.EP3D.value)],
                [KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
            ]
        else:
            keyboard = [
                [KeyboardButton(TrainType.RA1.value), KeyboardButton(TrainType.RA2.value), 
                 KeyboardButton(TrainType.RA3.value)],
                [KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
            ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Å—Ç–∞–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=reply_markup
        )
        return CHOOSE_TRAIN_TYPE

async def show_next_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    message = update.callback_query.message if update.callback_query else update.message
    
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏—ë–º–∫—É
        reception = session.query(TrainReception).filter(
            TrainReception.id == context.user_data['reception_id']
        ).first()
        
        if not reception:
            await message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏—ë–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]], 
                                               resize_keyboard=True)
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–ª–æ–∫
        block = session.query(BlockInTrain).filter(
            BlockInTrain.reception_id == reception.id,
            BlockInTrain.is_checked == False
        ).first()
        
        if not block:
            # –í—Å–µ –±–ª–æ–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
            reception.is_completed = True
            session.commit()
            
            keyboard = [
                [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
                [KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫')],
                [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await message.reply_text(
                '‚úÖ –ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
            return CHOOSE_ACTION
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
        block_info = (
            f'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞: {block.block_number}</b>\n\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{BLOCK_DESCRIPTIONS[block.block_number]}\n\n'
            '‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n'
        )
        
        for item in BLOCK_CHECKLIST[block.block_number]:
            block_info += f'‚Ä¢ {item}\n'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–ª–æ–∫–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_ok_{block.id}"),
                InlineKeyboardButton("‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_fail_{block.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            block_info,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return CHECK_BLOCKS

async def handle_block_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    action, block_id = query.data.split('_')[1:]
    block_id = int(block_id)
    
    with session_scope() as session:
        block = session.query(BlockInTrain).get(block_id)
        if not block:
            await query.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return ConversationHandler.END
        
        if action == 'fail':
            # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await query.message.reply_text(
                'üìù –û–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:'
            )
            context.user_data['current_block_id'] = block_id
            return ENTER_NOTES
        else:
            # –ï—Å–ª–∏ –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–µ–Ω, –æ—Ç–º–µ—á–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            block.is_checked = True
            block.notes = "–ò—Å–ø—Ä–∞–≤–µ–Ω"
            return await show_next_block(update, context)

async def handle_block_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏"""
    notes = update.message.text.strip()
    block_id = context.user_data['current_block_id']
    
    with session_scope() as session:
        block = session.query(BlockInTrain).get(block_id)
        if block:
            block.is_checked = True
            block.notes = notes
    
    return await show_next_block(update, context)

async def show_reception_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏—ë–º–æ–∫"""
    # –û—Ç–º–µ—á–∞–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    context.user_data['from_main_menu'] = update.message.text == 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫'
    print(f"Opening history from main menu: {context.user_data['from_main_menu']}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–∏—ë–º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        receptions = session.query(TrainReception).filter(
            TrainReception.user_id == update.effective_user.id
        ).order_by(TrainReception.created_at.desc()).limit(10).all()
        
        if not receptions:
            keyboard = [
                [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
                [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                'üìù –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫ –ø—É—Å—Ç–∞.',
                reply_markup=reply_markup
            )
            return CHOOSE_ACTION
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏—ë–º–∫–∏
        keyboard = []
        for reception in receptions:
            status = "‚úÖ" if reception.is_completed else "üîÑ"
            button = InlineKeyboardButton(
                f"{status} {reception.train_type.value} ‚Ññ{reception.train_number} "
                f"({reception.created_at.strftime('%d.%m.%Y %H:%M')})",
                callback_data=f"view_reception_{reception.id}"
            )
            keyboard.append([button])
            print(f"Created button with callback_data: view_reception_{reception.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_reception")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIEW_HISTORY
        return 1 if context.user_data.get('from_main_menu') else VIEW_HISTORY

async def handle_history_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—ë–º–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    print(f"Received callback query: {query}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"Callback data: {query.data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    try:
        await query.answer()
        
        if query.data == "back_to_reception":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
                [KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫')],
                [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.message.reply_text(
                'üöÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if context.user_data.get('from_main_menu'):
                await show_main_menu(update, context)
                return ConversationHandler.END
            return CHOOSE_ACTION
        
        if query.data.startswith('view_reception_'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏
            reception_id = int(query.data.split('_')[2])
            print(f"Showing reception with ID: {reception_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            await show_reception_report(update, context, reception_id)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIEW_HISTORY
            return VIEW_HISTORY
        
        if query.data.startswith('export_pdf_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
            reception_id = int(query.data.split('_')[2])
            print(f"Exporting reception with ID: {reception_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            await handle_export_pdf(update, context)
            return VIEW_HISTORY
        
        print(f"Unknown callback data: {query.data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return VIEW_HISTORY
        
    except Exception as e:
        print(f"Error in handle_history_selection: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏—ë–º–∫—É."
        )
        return CHOOSE_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—ë–º–∫–∏ —Å–æ—Å—Ç–∞–≤–æ–≤
reception_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(['üöÇ –ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞']), start_reception)],
    states={
        CHOOSE_ACTION: [
            MessageHandler(filters.Text(['üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞', 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫']), handle_reception_choice),
            MessageHandler(filters.Text(['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']), show_main_menu)
        ],
        ENTER_TRAIN_NUMBER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_train_number)
        ],
        CHOOSE_TRAIN_CATEGORY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_train_category)
        ],
        CHOOSE_TRAIN_TYPE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_train_type)
        ],
        CHECK_BLOCKS: [
            CallbackQueryHandler(handle_block_check, pattern=r'^block_(ok|fail)_\d+$'),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_block_notes)
        ],
        ENTER_NOTES: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_block_notes)
        ],
        VIEW_HISTORY: [
            CallbackQueryHandler(handle_history_selection, pattern=r'^(view_reception_\d+|back_to_reception|export_pdf_\d+)$'),
            MessageHandler(filters.Text(['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']), show_main_menu)
        ]
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        MessageHandler(filters.Text(['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']), cancel),
        MessageHandler(filters.Text(['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']), show_main_menu)
    ],
    allow_reentry=True
)
