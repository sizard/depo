from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from datetime import datetime

from models import User, TrainReception, TrainType, BlockInTrain
from database import session_scope
from handlers.common import show_main_menu, cancel
from train_blocks import TRAIN_BLOCKS, BLOCK_DESCRIPTIONS, BLOCK_CHECKLIST
from handlers.reports import show_reception_report, handle_export_pdf

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—ë–º–∫–∏
CHOOSE_ACTION, ENTER_TRAIN_NUMBER, CHOOSE_TRAIN_TYPE, CHECK_BLOCKS, ENTER_NOTES = range(5)

async def start_reception(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—ë–º–∫–∏"""
    keyboard = [
        [KeyboardButton('üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞')],
        [KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫')],
        [KeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üöÇ <b>–ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞</b>\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return CHOOSE_ACTION

async def handle_reception_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    choice = update.message.text
    
    if choice == 'üÜï –ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞':
        await update.message.reply_text(
            'üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–∞–≤–∞:'
        )
        return ENTER_TRAIN_NUMBER
    elif choice == 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫':
        return await show_reception_history(update, context)
    elif choice == '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.'
        )
        return CHOOSE_ACTION

async def handle_train_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞"""
    train_number = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not train_number.isdigit():
        await update.message.reply_text(
            '‚ö†Ô∏è –ù–æ–º–µ—Ä —Å–æ—Å—Ç–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n'
            'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )
        return ENTER_TRAIN_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['train_number'] = train_number
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Å–æ—Å—Ç–∞–≤–æ–≤
    keyboard = [
        [KeyboardButton('üöÖ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞')],
        [KeyboardButton('üöÇ –†–µ–ª—å—Å–æ–≤—ã–π –∞–≤—Ç–æ–±—É—Å')],
        [KeyboardButton('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üöÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Å—Ç–∞–≤–∞:',
        reply_markup=reply_markup
    )
    return CHOOSE_TRAIN_TYPE

async def handle_train_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ—Å—Ç–∞–≤–∞"""
    type_text = update.message.text.strip()
    
    if type_text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await show_main_menu(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ—Å—Ç–∞–≤–∞
    train_type = None
    if type_text == 'üöÖ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞':
        train_type = TrainType.ELEKTRICHKA
    elif type_text == 'üöÇ –†–µ–ª—å—Å–æ–≤—ã–π –∞–≤—Ç–æ–±—É—Å':
        train_type = TrainType.RAIL_BUS
    else:
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Å—Ç–∞–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'
        )
        return CHOOSE_TRAIN_TYPE
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏—ë–º–∫—É
    try:
        with session_scope() as session:
            user = session.query(User).filter(User.id == update.effective_user.id).first()
            if not user:
                await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                return ConversationHandler.END
            
            reception = TrainReception(
                train_number=context.user_data['train_number'],
                train_type=train_type,
                user_id=user.id,
                created_at=datetime.now(),
                is_completed=False
            )
            session.add(reception)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏—ë–º–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            for block_name in TRAIN_BLOCKS[train_type]:
                block = BlockInTrain(
                    reception_id=reception.id,
                    block_number=block_name,
                    is_checked=False
                )
                session.add(block)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏—ë–º–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['reception_id'] = reception.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            block = session.query(BlockInTrain).filter(
                BlockInTrain.reception_id == reception.id,
                BlockInTrain.is_checked == False
            ).first()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
            block_info = (
                f'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞: {block.block_number}</b>\n\n'
                f'üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{BLOCK_DESCRIPTIONS[block.block_number]}\n\n'
                '‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n'
            )
            for item in BLOCK_CHECKLIST[block.block_number]:
                block_info += f'‚Ä¢ {item}\n'
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–ª–æ–∫–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_ok_{block.id}"),
                    InlineKeyboardButton("‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_fail_{block.id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                block_info,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return CHECK_BLOCKS
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—ë–º–∫–∏: {str(e)}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—ë–º–∫–∏.\n'
            'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
        )
        return ConversationHandler.END

async def show_next_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–ª–æ–∫
        block = session.query(BlockInTrain).filter(
            BlockInTrain.reception_id == context.user_data['reception_id'],
            BlockInTrain.is_checked == False
        ).first()
        
        if not block:
            # –í—Å–µ –±–ª–æ–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
            reception = session.query(TrainReception).get(context.user_data['reception_id'])
            reception.is_completed = True
            
            message_text = (
                '‚úÖ –ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n'
                f'üöÇ –°–æ—Å—Ç–∞–≤ ‚Ññ{reception.train_number}\n'
                f'üìÖ –î–∞—Ç–∞: {reception.created_at.strftime("%d.%m.%Y %H:%M")}\n'
                'üèÅ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–∞\n\n'
                'üìã –°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç...'
            )
            
            if hasattr(update, 'callback_query'):
                await update.callback_query.message.reply_text(message_text)
            else:
                await update.message.reply_text(message_text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
            from handlers.reports import show_reception_report
            await show_reception_report(update, context)
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
        block_info = (
            f'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞: {block.block_number}</b>\n\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{BLOCK_DESCRIPTIONS[block.block_number]}\n\n'
            '‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n'
        )
        for item in BLOCK_CHECKLIST[block.block_number]:
            block_info += f'‚Ä¢ {item}\n'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–ª–æ–∫–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_ok_{block.id}"),
                InlineKeyboardButton("‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"block_fail_{block.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query'):
            await update.callback_query.message.reply_text(
                block_info,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                block_info,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        return CHECK_BLOCKS

async def handle_block_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    action, block_id = query.data.split('_')[1:]
    block_id = int(block_id)
    
    with session_scope() as session:
        block = session.query(BlockInTrain).get(block_id)
        if not block:
            await query.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return ConversationHandler.END
        
        if action == 'fail':
            # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await query.message.reply_text(
                'üìù –û–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:'
            )
            context.user_data['current_block_id'] = block_id
            return ENTER_NOTES
        else:
            # –ï—Å–ª–∏ –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–µ–Ω, –æ—Ç–º–µ—á–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            block.is_checked = True
            block.notes = "–ò—Å–ø—Ä–∞–≤–µ–Ω"
            return await show_next_block(update, context)

async def handle_block_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏"""
    notes = update.message.text.strip()
    block_id = context.user_data['current_block_id']
    
    with session_scope() as session:
        block = session.query(BlockInTrain).get(block_id)
        if block:
            block.is_checked = True
            block.notes = notes
    
    return await show_next_block(update, context)

async def show_reception_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏—ë–º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–∏—ë–º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        receptions = session.query(TrainReception)\
            .filter(TrainReception.user_id == update.effective_user.id)\
            .order_by(TrainReception.created_at.desc())\
            .limit(10)\
            .all()
        
        if not receptions:
            await update.message.reply_text(
                'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫ –ø—É—Å—Ç–∞.\n'
                '–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏—ë–º–∫—É!'
            )
            return await start_reception(update, context)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏—ë–º–∫–∏
        keyboard = []
        for reception in receptions:
            status = "‚úÖ" if reception.is_completed else "üîÑ"
            button_text = f"{status} –°–æ—Å—Ç–∞–≤ ‚Ññ{reception.train_number} ({reception.created_at.strftime('%d.%m.%Y')})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_reception_{reception.id}")])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_reception")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–∫</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞:',
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return CHECK_BLOCKS

async def handle_history_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—ë–º–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_reception":
        return await start_reception(update, context)
    
    reception_id = int(query.data.split('_')[2])
    from handlers.reports import show_reception_report
    await show_reception_report(update, context, reception_id)
    return CHECK_BLOCKS

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—ë–º–∫–∏
reception_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Text(['üöÇ –ü—Ä–∏—ë–º–∫–∞ —Å–æ—Å—Ç–∞–≤–∞']), start_reception)],
    states={
        CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reception_choice)],
        ENTER_TRAIN_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_train_number)],
        CHOOSE_TRAIN_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_train_type)],
        CHECK_BLOCKS: [
            CallbackQueryHandler(handle_block_check, pattern=r'^block_(ok|fail)_\d+$'),
            CallbackQueryHandler(handle_history_selection, pattern=r'^view_reception_\d+$'),
            CallbackQueryHandler(handle_history_selection, pattern=r'^back_to_reception$'),
            CallbackQueryHandler(handle_export_pdf, pattern=r'^export_pdf_\d+$')
        ],
        ENTER_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_block_notes)],
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        MessageHandler(filters.Text(['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']), show_main_menu)
    ]
)
