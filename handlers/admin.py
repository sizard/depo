from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from models import User, UserRole
from database import session_scope
from .common import show_main_menu

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
ADMIN_MENU, VIEW_USERS, SELECT_USER, CONFIRM_ACTION = range(4)

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        with session_scope() as session:
            user = session.query(User).filter(User.id == update.effective_user.id).first()
            if not user or not user.is_admin:
                await update.message.reply_text(
                    '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'
                )
                return ConversationHandler.END
        return await func(update, context)
    return wrapper

@admin_required
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    return ADMIN_MENU

@admin_required
async def view_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with session_scope() as session:
        users = session.query(User).all()
        
        if not users:
            await update.message.reply_text('üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.')
            return ADMIN_MENU
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = []
        for user in users:
            status = "üëë" if user.is_admin else "üö´" if user.is_blocked else "‚úÖ"
            button = InlineKeyboardButton(
                f"{status} {user.full_name} ({user.position})",
                callback_data=f"user_{user.id}"
            )
            keyboard.append([button])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return SELECT_USER

@admin_required
async def handle_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_admin":
        await admin_menu(update, context)
        return ADMIN_MENU
    
    user_id = int(query.data.split('_')[1])
    context.user_data['selected_user_id'] = user_id
    
    with session_scope() as session:
        user = session.query(User).get(user_id)
        if not user:
            await query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ADMIN_MENU
        
        status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.is_admin else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "–ê–∫—Ç–∏–≤–µ–Ω"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        if not user.is_admin:
            keyboard.append([InlineKeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", 
                                                callback_data=f"make_admin_{user_id}")])
        if user.is_blocked:
            keyboard.append([InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", 
                                                callback_data=f"unblock_{user_id}")])
        else:
            keyboard.append([InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", 
                                                callback_data=f"block_{user_id}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"üì± Telegram ID: {user.id}\n"
            f"üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.position}\n"
            f"üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user.branch}\n"
            f"üîë –°—Ç–∞—Ç—É—Å: {status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return CONFIRM_ACTION

@admin_required
async def handle_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_list":
        await view_users(update, context)
        return SELECT_USER
    
    action, user_id = query.data.split('_')[0:2]
    user_id = int(user_id)
    
    with session_scope() as session:
        user = session.query(User).get(user_id)
        if not user:
            await query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ADMIN_MENU
        
        if action == "make_admin":
            user.is_admin = True
            message = f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        elif action == "block":
            user.is_blocked = True
            message = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        elif action == "unblock":
            user.is_blocked = False
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        try:
            if action == "make_admin":
                await context.bot.send_message(
                    user_id,
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            elif action == "block":
                await context.bot.send_message(
                    user_id,
                    "‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            elif action == "unblock":
                await context.bot.send_message(
                    user_id,
                    "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        await query.message.edit_text(
            f"{message}\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        )
        await view_users(update, context)
        return SELECT_USER

@admin_required
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    with session_scope() as session:
        total_users = session.query(User).count()
        admin_users = session.query(User).filter(User.is_admin == True).count()
        blocked_users = session.query(User).filter(User.is_blocked == True).count()
        active_users = total_users - blocked_users
        
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_users}\n"
        )
        return ADMIN_MENU

@admin_required
async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
        return await view_users(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_statistics(update, context)
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return ADMIN_MENU

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
admin_handler = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Text(["‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]), admin_menu),
        CommandHandler("admin", admin_menu)
    ],
    states={
        ADMIN_MENU: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_menu)
        ],
        SELECT_USER: [
            CallbackQueryHandler(handle_user_selection)
        ],
        CONFIRM_ACTION: [
            CallbackQueryHandler(handle_user_action)
        ]
    },
    fallbacks=[
        MessageHandler(filters.Text(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]), show_main_menu),
        CommandHandler("cancel", show_main_menu)
    ]
)
