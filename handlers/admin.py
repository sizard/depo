from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from models import User, UserRole
from database import session_scope
from .common import show_main_menu

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
ADMIN_MENU, VIEW_USERS, MANAGE_USER = range(3)

async def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        with session_scope() as session:
            user = session.query(User).filter(User.id == update.effective_user.id).first()
            if not user or not user.is_admin:
                await update.message.reply_text(
                    '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'
                )
                return ConversationHandler.END
        return await func(update, context)
    return wrapper

@admin_required
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
        [KeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    return ADMIN_MENU

@admin_required
async def view_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with session_scope() as session:
        users = session.query(User).all()
        
        if not users:
            await update.message.reply_text('üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.')
            return ADMIN_MENU
        
        message = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            message += (
                f"üë§ {user.last_name} {user.first_name}\n"
                f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.position}\n"
                f"üöÇ –î–æ—Ä–æ–≥–∞: {user.railway.value}\n"
                f"üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user.branch}\n"
                f"üé≠ –†–æ–ª—å: {user.role.value}\n"
                f"üÜî ID: {user.id}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        
        await update.message.reply_text(message)
    return ADMIN_MENU

@admin_required
async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        user_id = int(context.args[0])
    except (ValueError, IndexError):
        await update.message.reply_text(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
            '–ü—Ä–∏–º–µ—Ä: /set_admin 123456789'
        )
        return ADMIN_MENU
    
    with session_scope() as session:
        user = session.query(User).filter(User.id == user_id).first()
        if not user:
            await update.message.reply_text('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return ADMIN_MENU
        
        user.role = UserRole.ADMIN
        
        await update.message.reply_text(
            f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.last_name} {user.first_name} '
            f'–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
        )
    return ADMIN_MENU

@admin_required
async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await update.message.reply_text(
        'üöß –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
    )
    return ADMIN_MENU

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é"""
    choice = update.message.text
    
    if choice == "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        return await view_users(update, context)
    elif choice == "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        await update.message.reply_text(
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_admin —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
            '–ü—Ä–∏–º–µ—Ä: /set_admin 123456789'
        )
        return ADMIN_MENU
    elif choice == "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        return await block_user(update, context)
    elif choice == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, context)
    
    await update.message.reply_text('‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.')
    return ADMIN_MENU

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
admin_handler = ConversationHandler(
    entry_points=[CommandHandler("admin", admin_menu)],
    states={
        ADMIN_MENU: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_menu),
            CommandHandler("set_admin", set_admin)
        ]
    },
    fallbacks=[CommandHandler("cancel", show_main_menu)]
)
