from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import os

from models import TrainReception, BlockInTrain
from database import session_scope
from train_blocks import BLOCK_DESCRIPTIONS
from handlers.pdf_generator import generate_reception_pdf

async def show_reception_report(update: Update, context: ContextTypes.DEFAULT_TYPE, reception_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–∏—ë–º–∫–µ —Å–æ—Å—Ç–∞–≤–∞"""
    print(f"Showing reception report for ID: {reception_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    if not reception_id and 'reception_id' in context.user_data:
        reception_id = context.user_data['reception_id']
    
    if not reception_id:
        message = update.callback_query.message if update.callback_query else update.message
        await message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø—Ä–∏—ë–º–∫–∏.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏—ë–º–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.'
        )
        return
    
    try:
        with session_scope() as session:
            reception = session.query(TrainReception).get(reception_id)
            if not reception:
                message = update.callback_query.message if update.callback_query else update.message
                await message.reply_text('‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏—ë–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                return
            
            print(f"Found reception: {reception.train_number}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            report = (
                f'üìã <b>–û—Ç—á–µ—Ç –æ –ø—Ä–∏—ë–º–∫–µ —Å–æ—Å—Ç–∞–≤–∞ ‚Ññ{reception.train_number}</b>\n\n'
                f'üöÇ –¢–∏–ø —Å–æ—Å—Ç–∞–≤–∞: {reception.train_type.value}\n'
                f'üë§ –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {reception.user.full_name}\n'
                f'üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {reception.user.position}\n'
                f'üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {reception.user.branch}\n'
                f'üìÖ –î–∞—Ç–∞: {reception.created_at.strftime("%d.%m.%Y %H:%M")}\n'
                f'üèÅ –°—Ç–∞—Ç—É—Å: {"–ó–∞–≤–µ—Ä—à–µ–Ω–∞" if reception.is_completed else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"}\n\n'
                'üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–æ–≤:</b>\n'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
            for block in reception.blocks:
                status = "‚úÖ –ò—Å–ø—Ä–∞–≤–µ–Ω" if block.notes == "–ò—Å–ø—Ä–∞–≤–µ–Ω" else "‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
                report += f'\n<b>{block.block_number}</b>: {status}\n'
                if block.notes and block.notes != "–ò—Å–ø—Ä–∞–≤–µ–Ω":
                    report += f'üìù –ó–∞–º–µ—á–∞–Ω–∏—è: {block.notes}\n'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
            keyboard = [[InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_pdf_{reception_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = update.callback_query.message if update.callback_query else update.message
            print("Sending report message...")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            await message.reply_text(report, reply_markup=reply_markup, parse_mode='HTML')
            print("Report sent successfully")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    except Exception as e:
        print(f"Error in show_reception_report: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        message = update.callback_query.message if update.callback_query else update.message
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_export_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ PDF"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏—ë–º–∫–∏ –∏–∑ callback_data
        reception_id = int(query.data.split('_')[2])
        print(f"Generating PDF for reception_id: {reception_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        filepath = generate_reception_pdf(reception_id)
        print(f"PDF generated at: {filepath}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as pdf_file:
            await query.message.reply_document(
                document=pdf_file,
                filename=os.path.basename(filepath),
                caption='üìë –û—Ç—á–µ—Ç –æ –ø—Ä–∏—ë–º–∫–µ —Å–æ—Å—Ç–∞–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF'
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filepath)
        print("PDF file sent and removed successfully")
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF:\n{error_details}")
        await query.message.reply_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:\n{str(e)}'
        )
